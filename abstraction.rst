:Date: 01/28/2016

抽象
======

前言
-----

因为快要结束实习回家的缘故,快到本周二的时候,手上差不多没有任务了,回想了一下自己
挖的坑.顺手拿起了SICP,因为这本书被奉为经典的与抽象有关的书.想想自己挖的坑,
我需要的正是这本书.事实证明SICP确实是一本好书.

这篇笔记其实也是对自己这半年挖的坑,自己写的烂代码的总结.如果你觉得不好,
请喷我!谢谢!当然,希望喷我的时候带着干货 :)

从原子说起
-----------

为什么叫原子呢,我也不知道,大概是因为原子是计算机里的一个比较小的不可划分的单位
吧(原子操作)?scheme中的pair正是这样的原子之一,由pair的操作,car,cdr,cons就可以
组合成list,另外从书中的例子来说(特别是1.3节),完成一个功能并不是由一个巨大的
函数来完成,而是不同的函数不同的责任,然后把它们组合起来.

    吐个槽, 其实SICP英文版看起来很舒服. 想想家里书柜上躺着的中文版,唉,
    又浪费钱了.

.. code:: scheme

    (list <a1> <a2> ... <an>)

    ; is equivalent to:

    (cons <a1> (cons <a2> (cons ... (cons <an> nil) ...)))

    ; 再用这个组合起map函数

    (define (map proc items)
      (if (null? items)
        nil
        (cons (proc (car items))
              (map proc (cdr items)))))

实际中的编程也是这样的,并不是一个巨大的函数做完一切,也不是每个功能一个函数,
这个函数里包括了需要的一切.

相反,编码之前就应该先想好,有哪些部分是可以抽象出来,达到共用的.比如我最近做的
移动客户端的"现场演出"API来说,可能会有某个音乐人的现场演出列表,可能会有我收藏
的现场演出列表,那是不是写两个Controller来分别完成这一切呢?不是.也不是一个
把它们揉在一个Controller里. 而是把获取一个人的信息写成一个函数,获取一个演出
的信息写成一个函数,对一组演出做某种排序写成一个函数,然后就可以把它们组合起来,
最后写成一个API,客户端解析起来轻松,我改起来也轻松.当然,我是菜鸟,这只是我
个人挖过坑和被喷之后的感悟(路漫漫其修远兮).

Generic
---------

我们学习数据结构或者算法的时候,为了方便,一般举的例子就是int型数值,进行排序或者
其他操作.比如 `这个合并排序`_ :

.. _`这个合并排序`: https://github.com/jiajunhuang/intro_to_algorithms/blob/master/chap2/merge_sort/merge.c

在代码里我为了方便,假设我就是要对整数排序,我依赖了这个条件,所以我的代码就被
局限在我做的假设里,而不能用来对字符串排序.

而抽象确是相反的方向,不关心我要怎么对整数排序, 我也不关心我要排序的是不是
整数.我只关心排序的本质,我要怎么比较两个数?我要用什么样的算法来减少比较次数?

所以为了写出更抽象的代码,我个人的总结就是两个字:"放权".相信其他函数,相信调用者,
让函数调用者(通常都是我自己-.-)给我们提供比较函数.比如这个 `通用的qsort1`_ ,
或者 `通用的qsort2`_ , 其中的 `__compar_d_fn_t cmp` 就要求调用者提供比较函数.

.. _`通用的qsort1`: https://sourceware.org/git/?p=glibc.git;a=blob;f=stdlib/qsort.c;h=04c25b984f74a8f738233cc6da8a738b6437833c;hb=b8079dd0d360648e4e8de48656c5c38972621072
.. _`通用的qsort2`: https://en.wikibooks.org/wiki/Algorithm_Implementation/Sorting/Quicksort#C

xxx oriented? xxx programming language?
-----------------------------------------

面向对象里有很多不错的设计,其中有一条就是代码复用...呃...真的吗?

现在我的感悟就是,不管是面向什么,也不管是什么语言,能不能写出好代码和这些都没
有直接关系.并不因为Java是纯面向对象你就能写出100%复用的代码,也不因为C是纯
面向过程的语言,就不能写出复用性高的代码,推荐看一看
`Object-oriented Programming in ANSI-C`_ .
当然,这并不是说明你可以轻视语言内建的语法糖,如果是这样,那么你写的代码就会
出很多bug...也不能写出一些"高级"的代码. 比如如果你不了解 Python中函数默认参数
只会计算一次,你肯定会踩这个坑::

    >>> def foo(alist=[]):
    ...     alist.append(1)
    ...     print(alist)
    ...
    >>> foo()
    [1]
    >>> foo()
    [1, 1]
    >>> foo()
    [1, 1, 1]

写出可复用性高一些的代码的诀窍就是累积经验,有一些需求在一开始想来,并不能放在
一起,虽然他们过程相似(wait,这已经是一个可以抽象的信号了). 随着实际编码的进行,
越会发现,其实他们是一样的,只是有一小部分操作不一样,你可以把他们留出来,然后
把相同的部分合在一起.也可以把不同的操作分成两个函数,让调用者传进来.就跟上上面
说的一样. :)

.. _`Object-oriented Programming in ANSI-C`: https://www.cs.rit.edu/~ats/books/ooc.pdf

总结
-----

抽象,感觉很棒! 我还没有入门.2016, 加油!
